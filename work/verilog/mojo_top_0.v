/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alu1_result;
  wire [1-1:0] M_alu1_v;
  reg [16-1:0] M_alu1_a;
  reg [16-1:0] M_alu1_b;
  reg [6-1:0] M_alu1_alufn;
  alu_1 alu1 (
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alufn(M_alu1_alufn),
    .result(M_alu1_result),
    .v(M_alu1_v)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [8-1:0] M_wow_seg;
  wire [4-1:0] M_wow_sel;
  reg [6-1:0] M_wow_alufn;
  reg [32-1:0] M_wow_fromTester;
  reg [1-1:0] M_wow_anotherMode;
  display_3 wow (
    .clk(clk),
    .rst(rst),
    .alufn(M_wow_alufn),
    .fromTester(M_wow_fromTester),
    .anotherMode(M_wow_anotherMode),
    .seg(M_wow_seg),
    .sel(M_wow_sel)
  );
  reg [15:0] M_dataA_d, M_dataA_q = 1'h0;
  reg [15:0] M_dataB_d, M_dataB_q = 1'h0;
  
  wire [32-1:0] M_tester_out;
  tester16_4 tester (
    .clk(clk),
    .rst(rst),
    .pause(io_dip[16+6+0-:1]),
    .restarttest(io_button[1+0-:1]),
    .out(M_tester_out)
  );
  
  always @* begin
    M_dataA_d = M_dataA_q;
    M_dataB_d = M_dataB_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = M_wow_seg;
    io_sel = M_wow_sel;
    io_led[16+7-:8] = M_alu1_result[8+7-:8];
    io_led[8+7-:8] = M_alu1_result[0+7-:8];
    io_led[0+7-:8] = io_dip[0+7-:8];
    M_wow_alufn = 6'h00;
    M_wow_anotherMode = 1'h0;
    M_wow_fromTester = 32'hffffffff;
    M_alu1_a = 16'h0000;
    M_alu1_b = 16'h0000;
    M_alu1_alufn = 6'h00;
    if (io_dip[0+7+0-:1] == 1'h1) begin
      M_alu1_alufn[0+5-:6] = io_dip[0+0+5-:6];
      M_wow_alufn[0+5-:6] = io_dip[0+0+5-:6];
      if (io_button[3+0-:1] == 1'h1) begin
        M_dataA_d = {io_dip[16+7-:8], io_dip[8+7-:8]};
      end
      if (io_button[4+0-:1] == 1'h1) begin
        M_dataB_d = {io_dip[16+7-:8], io_dip[8+7-:8]};
      end
      M_alu1_a = M_dataA_q;
      M_alu1_b = M_dataB_q;
    end
    if (io_dip[0+6+0-:1] == 1'h1) begin
      M_wow_fromTester = M_tester_out;
      M_wow_anotherMode = 1'h1;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_dataA_q <= 1'h0;
      M_dataB_q <= 1'h0;
    end else begin
      M_dataA_q <= M_dataA_d;
      M_dataB_q <= M_dataB_d;
    end
  end
  
endmodule
