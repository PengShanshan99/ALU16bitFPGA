/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tester16_4 (
    input clk,
    input rst,
    input pause,
    input restarttest,
    output reg [31:0] out
  );
  
  
  
  localparam CLKSPEED = 5'h1a;
  
  reg [25:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [16-1:0] M_alu1_result;
  wire [1-1:0] M_alu1_v;
  reg [16-1:0] M_alu1_a;
  reg [16-1:0] M_alu1_b;
  reg [6-1:0] M_alu1_alufn;
  alu_1 alu1 (
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alufn(M_alu1_alufn),
    .result(M_alu1_result),
    .v(M_alu1_v)
  );
  
  localparam START_state = 5'd0;
  localparam ADD_state = 5'd1;
  localparam ADD_OVR_state = 5'd2;
  localparam SUB_state = 5'd3;
  localparam SUB_OVR_state = 5'd4;
  localparam AND_state = 5'd5;
  localparam OR_state = 5'd6;
  localparam XOR_state = 5'd7;
  localparam A_state = 5'd8;
  localparam SHL_state = 5'd9;
  localparam SHR_state = 5'd10;
  localparam SRA_state = 5'd11;
  localparam CMPEQ_state = 5'd12;
  localparam CMPLT_state = 5'd13;
  localparam CMPLE_state = 5'd14;
  localparam MULTIPLY_state = 5'd15;
  localparam END_state = 5'd16;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_counter_d = M_counter_q + 1'h1;
    
    case (M_state_q)
      START_state: begin
        M_alu1_alufn = 1'h0;
        out = 32'h00000000;
        M_alu1_a = 1'h0;
        M_alu1_b = 1'h0;
        if (restarttest == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 16'h0001;
        M_alu1_b = 16'h0003;
        if (M_alu1_result == 16'h0004) begin
          out[0+7-:8] = 8'hc0;
          out[8+7-:8] = 8'hf9;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = ADD_OVR_state;
        end
      end
      ADD_OVR_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 16'h4000;
        M_alu1_b = 16'h4000;
        if (M_alu1_v == 1'h1) begin
          out[0+7-:8] = 8'hc0;
          out[8+7-:8] = 8'ha4;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = SUB_state;
        end
      end
      SUB_state: begin
        M_alu1_alufn = 6'h01;
        M_alu1_a = 16'h0003;
        M_alu1_b = 16'h0003;
        if (M_alu1_result == 16'h0000) begin
          out[0+7-:8] = 8'hc0;
          out[8+7-:8] = 8'hb0;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = SUB_OVR_state;
        end
      end
      SUB_OVR_state: begin
        M_alu1_alufn = 1'h1;
        M_alu1_a = 16'hbfff;
        M_alu1_b = 16'h4000;
        if (M_alu1_result == 16'h7fff) begin
          out[0+7-:8] = 8'hc0;
          out[8+7-:8] = 8'h99;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        M_alu1_alufn = 6'h18;
        M_alu1_a = 16'h0001;
        M_alu1_b = 16'h0003;
        if (M_alu1_result == 16'h0001) begin
          out[0+7-:8] = 8'hc0;
          out[8+7-:8] = 8'h92;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        M_alu1_alufn = 6'h1e;
        M_alu1_a = 16'h000a;
        M_alu1_b = 16'h000f;
        if (M_alu1_result == 16'h000f) begin
          out[0+7-:8] = 8'hc0;
          out[8+7-:8] = 8'h82;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        M_alu1_alufn = 6'h16;
        M_alu1_a = 16'h000a;
        M_alu1_b = 16'h000c;
        if (M_alu1_result == 16'h0006) begin
          out[0+7-:8] = 8'hc0;
          out[8+7-:8] = 8'hf8;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        M_alu1_alufn = 6'h1a;
        M_alu1_a = 16'h000a;
        M_alu1_b = 16'h000c;
        if (M_alu1_result == 16'h000a) begin
          out[0+7-:8] = 8'hc0;
          out[8+7-:8] = 8'h80;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = CMPEQ_state;
        end
      end
      CMPEQ_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 16'h000a;
        M_alu1_b = 16'h000a;
        if (M_alu1_result == 1'h1) begin
          out[0+7-:8] = 8'hc0;
          out[8+7-:8] = 8'h90;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = CMPLT_state;
        end
      end
      CMPLT_state: begin
        M_alu1_alufn = 6'h34;
        M_alu1_a = 16'h000a;
        M_alu1_b = 16'h000a;
        if (M_alu1_result == 1'h0) begin
          out[0+7-:8] = 8'hf9;
          out[8+7-:8] = 8'hc0;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = CMPLE_state;
        end
      end
      CMPLE_state: begin
        M_alu1_alufn = 6'h37;
        M_alu1_a = 16'h000a;
        M_alu1_b = 16'h000a;
        if (M_alu1_result == 1'h1) begin
          out[0+7-:8] = 8'hf9;
          out[8+7-:8] = 8'hf9;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        M_alu1_alufn = 6'h20;
        M_alu1_a = 16'h000a;
        M_alu1_b = 16'h0003;
        if (M_alu1_result == 16'h0050) begin
          out[0+7-:8] = 8'hf9;
          out[8+7-:8] = 8'ha4;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        M_alu1_alufn = 6'h21;
        M_alu1_a = 16'h0050;
        M_alu1_b = 16'h0003;
        if (M_alu1_result == 16'h000a) begin
          out[0+7-:8] = 8'hf9;
          out[8+7-:8] = 8'hb0;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        M_alu1_alufn = 6'h23;
        M_alu1_a = 16'h8008;
        M_alu1_b = 16'h0003;
        if (M_alu1_result == 16'hf001) begin
          out[0+7-:8] = 8'hf9;
          out[8+7-:8] = 8'h99;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = MULTIPLY_state;
        end
      end
      MULTIPLY_state: begin
        M_alu1_alufn = 6'h02;
        M_alu1_a = 16'h0002;
        M_alu1_b = 16'h0002;
        if (M_alu1_result == 16'h0004) begin
          out[0+7-:8] = 8'hf9;
          out[8+7-:8] = 8'h92;
          out[16+7-:8] = 8'hc0;
          out[24+7-:8] = 8'hc0;
        end else begin
          out[0+7-:8] = 8'h8e;
          out[8+7-:8] = 8'h88;
          out[16+7-:8] = 8'hf9;
          out[24+7-:8] = 8'hc7;
        end
        if (pause == 1'h0) begin
          M_state_d = END_state;
        end
      end
      END_state: begin
        out[0+7-:8] = 8'h86;
        out[8+7-:8] = 8'hab;
        out[16+7-:8] = 8'ha1;
        out[24+7-:8] = 8'hc0;
        M_alu1_a = 1'h0;
        M_alu1_b = 1'h0;
        M_alu1_alufn = 1'h0;
        if (restarttest == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
      default: begin
        M_state_d = START_state;
        out[0+7-:8] = 8'hc0;
        out[8+7-:8] = 8'hc0;
        out[16+7-:8] = 8'hc0;
        out[24+7-:8] = 8'hc0;
        M_alu1_a = 1'h0;
        M_alu1_b = 1'h0;
        M_alu1_alufn = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge M_counter_q[25+0-:1]) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
